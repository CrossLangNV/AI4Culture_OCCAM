"""
Django settings for occam_gateway project.

Generated by 'django-admin startproject' using Django 5.0.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""
import os
from pathlib import Path

from kombu import Queue, Exchange

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("DJANGO_SECRET_KEY", "")

# SECURITY WARNING: don't run with debug turned on in production!

DEBUG = False
try:
    DEBUG = bool(int(os.environ.get("DEBUG", 0)))
except ValueError:
    print("DEBUG environment variable is not an integer")
if DEBUG:
    print("DEBUG is enabled")

ALLOWED_HOSTS = [h for h in os.environ.get("ALLOWED_HOSTS", "localhost").split(" ")]

CSRF_TRUSTED_ORIGINS = [o for o in os.environ.get("CSRF_TRUSTED_ORIGINS", "").split(" ")]

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    # Swagger + Redoc
    "drf_spectacular",
    # Auth
    "rest_framework_api_key",
    # Apps
    "core.user",
    "correction",
    "ocr",
    "organisation",
    "segmentation",
    "translation",
]

# Rest Framework
REST_FRAMEWORK = {
    "DEFAULT_PERMISSION_CLASSES": [
        "organisation.permissions.HasOrganisationAPIKey",
    ],
    "DEFAULT_AUTHENTICATION_CLASSES": (),
    "DEFAULT_RENDERER_CLASSES": ("rest_framework.renderers.JSONRenderer",),
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
    "TEST_REQUEST_DEFAULT_FORMAT": "json",
}

# Swagger
SPECTACULAR_SETTINGS = {
    "TITLE": "AI4Culture - CrossLang API gateway",
    "DESCRIPTION": "Tools for multilingual text recognition in scanned documents",
    "VERSION": "1.0.0",
    "OAUTH2_FLOWS": ["password"],
    "OAUTH2_AUTHORIZATION_URL": "/auth",
    "OAUTH2_TOKEN_URL": "/auth/token",
    "OAUTH2_REFRESH_URL": "/auth/token",
    "OAUTH2_SCOPES": ["read", "write"],
    "SWAGGER_UI_SETTINGS": {
        "deepLinking": True,
        "persistAuthorization": True,
        "displayOperationId": True,
    },
    # available SwaggerUI versions: https://github.com/swagger-api/swagger-ui/releases
    "SWAGGER_UI_DIST": "//unpkg.com/swagger-ui-dist@4.0.0",  # default
    "SORT_OPERATIONS": False,  # Improve swagger by following our own defined order
    "COMPONENT_SPLIT_REQUEST": True,
    "APPEND_COMPONENTS": {
        "securitySchemes": {
            "ApiKeyAuth": {
                "type": "apiKey",
                "in": "header",
                "name": "Api-Key",
            }
        }
    },
    "SECURITY": [
        {
            "ApiKeyAuth": [],
        }
    ],
    "SCHEMA_PATH_PREFIX": "/api",
}

API_KEY_CUSTOM_HEADER = "HTTP_API_KEY"

AUTHENTICATION_BACKENDS = (
    # "rest_framework_social_oauth2.backends.DjangoOAuth2",
    "django.contrib.auth.backends.ModelBackend",
)

# For authentication and scope settings
OAUTH2_PROVIDER = {
    "ACCESS_TOKEN_EXPIRE_SECONDS": 7 * 24 * 60 * 60,
    "SCOPES": {"read": "Read scope", "write": "Write scope"},
}

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "occam_gateway.urls"

APPEND_SLASH = True

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "occam_gateway.wsgi.application"

# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": os.path.join(os.environ.get("DATA_DIR", BASE_DIR), "db.sqlite3"),
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

AUTH_USER_MODEL = "core_user.User"

# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Celery settings
CELERY_BROKER_URL = 'redis://redis:6379/0'
CELERY_RESULT_BACKEND = 'redis://redis:6379/0'
CELERY_RESULT_EXPIRES = 86400  # Results expire after 24 hours
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'UTC'

CELERY_QUEUES = (
    Queue('ocr_queue', Exchange('ocr_queue'), routing_key='ocr_queue'),
    Queue('translation_queue', Exchange('translation_queue'), routing_key='translation_queue'),
)


LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "default": {
            "format": "[DJANGO] %(levelname)s %(asctime)s %(module)s "
            "%(name)s.%(funcName)s:%(lineno)s: %(message)s"
        },
    },
    "handlers": {
        "console": {
            "level": "DEBUG" if DEBUG else "INFO",
            "class": "logging.StreamHandler",
            "formatter": "default",
        },
    },
    # "root": {
    #     "handlers": ["console"],
    #     "level": "WARNING",
    # },
    "loggers": {
        "": {
            "handlers": ["console"],
            "level": "DEBUG",
            # 'propagate': False,
        },
        # "django": {
        #     "handlers": ["console"],
        #     "level": os.getenv("DJANGO_LOG_LEVEL", "INFO"),
        #     "propagate": False,
        # },
    },
}
